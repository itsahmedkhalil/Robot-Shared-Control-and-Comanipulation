// Generated by gencpp from file SLERP/Num.msg
// DO NOT EDIT!


#ifndef SLERP_MESSAGE_NUM_H
#define SLERP_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>

namespace SLERP
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : q1()
    , q2()
    , t(0.0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : q1(_alloc)
    , q2(_alloc)
    , t(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q1_type;
  _q1_type q1;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q2_type;
  _q2_type q2;

   typedef float _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::SLERP::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SLERP::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::SLERP::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::SLERP::Num > NumPtr;
typedef boost::shared_ptr< ::SLERP::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::SLERP::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::SLERP::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::SLERP::Num_<ContainerAllocator1> & lhs, const ::SLERP::Num_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.t == rhs.t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::SLERP::Num_<ContainerAllocator1> & lhs, const ::SLERP::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace SLERP

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::SLERP::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SLERP::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::SLERP::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::SLERP::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SLERP::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SLERP::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::SLERP::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17a538d213721bf39aee66a387b311dd";
  }

  static const char* value(const ::SLERP::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17a538d213721bf3ULL;
  static const uint64_t static_value2 = 0x9aee66a387b311ddULL;
};

template<class ContainerAllocator>
struct DataType< ::SLERP::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SLERP/Num";
  }

  static const char* value(const ::SLERP::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::SLERP::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion q1\n"
"geometry_msgs/Quaternion q2\n"
"float32 t\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::SLERP::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::SLERP::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SLERP::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::SLERP::Num_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q2);
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLERP_MESSAGE_NUM_H
